#!/usr/bin/env python3

from os import getcwd
from os.path import exists, relpath
import argparse
import pathlib
import re
import sys

parser = argparse.ArgumentParser(
        prog='mkh',
        description='Generate C/C++ header files with include guards'
        )

parser.add_argument('files', metavar='file', type=str, nargs='+',
    help='file(s) to create (relative to working directory)')
parser.add_argument('--pragma', action='store_true',
    help='use `#pragma once` instead of macro guards')

args = parser.parse_args()

cwd_parent = pathlib.PurePath(getcwd()).parent

warned_non_standard = False

def gen_include_guard(p: str) -> str:
    global args
    global warned_non_standard

    fullpath = relpath(p, cwd_parent).upper()

    guard = re.sub(r'[^A-Z0-9]', '_', fullpath)
    guard = guard.strip('_')

    if re.match(r'[0-9]', guard):
        if not warned_non_standard:
            print(f"warning: non-standard include guard(s) generated",
                  file=sys.stderr)
            warned_non_standard = True

        guard = '_' + guard

    guard = re.sub(r'_+', '_', guard)

    return guard


for p in args.files:
    if exists(p):
        print(f"{p} already exists, skipping", file=sys.stderr)
        continue

    with open(p, mode='w') as outfile:
        if args.pragma:
            print('#pragma once', file=outfile)
        else:
            guard = gen_include_guard(p)
            print(f'#ifndef {guard}\n#define {guard}\n#endif  /* {guard} */',
                  file=outfile)

    print(f'successfully created {p}')
