#!/usr/bin/env python3

from os import getcwd
from os.path import exists, relpath
import argparse
import pathlib
import re
import sys
import uuid

parser = argparse.ArgumentParser(
        prog='mkh',
        description='Generate C/C++ header files with include guards'
        )

parser.add_argument('files', metavar='file', type=str, nargs='+',
    help='file(s) to create (relative to working directory)')
parser.add_argument('--pragma', action='store_true',
    help='use `#pragma once` instead of macro guards')
parser.add_argument('-u', '--uuid', action='store_true',
    help='generate a UUID for the include guards instead of using the path')
parser.add_argument('-c', '--extern-c', dest='extern_c', action='store_true',
    help='add `extern "C"\' for C++')
parser.add_argument('-n', '--namespace', metavar='ns[.ns2...]', type=str,
    help='generate one or more namespace blocks in the header')
parser.add_argument('-N', '--nested-namespaces', dest='nested_namespace_decls',
    action='store_true',
    help='generate C++17-style one-line namespace declarations')

args = parser.parse_args()

if args.namespace is not None and args.extern_c:
    print("error: --extern-c cannot be used with --namespace", file=sys.stderr)
    exit(1)

cwd_parent = pathlib.PurePath(getcwd()).parent

warned_non_standard = False

EXTERN_C='''
#ifdef __cplusplus
extern "C" {
#endif  /* __cplusplus */

#ifdef __cplusplus
}  /* extern "C" */
#endif /* __cplusplus */
'''

def gen_include_guard(p: str) -> str:
    global args
    global warned_non_standard


    fullpath = ""

    if args.uuid:
        fullpath = pathlib.PurePath(p).name.upper()
    else:
        fullpath = relpath(p, cwd_parent).upper()

    guard = re.sub(r'[^A-Z0-9]', '_', fullpath)
    guard = guard.strip('_')

    if args.uuid:
        guard = guard + '_' + str(uuid.uuid4()).upper().replace('-', '_')

    if re.match(r'[0-9]', guard):
        if not warned_non_standard:
            print(f"warning: non-standard include guard(s) generated",
                  file=sys.stderr)
            warned_non_standard = True

        guard = '_' + guard

    guard = re.sub(r'_+', '_', guard)

    return guard

def gen_namespaces(namespaces_str: str) -> str:
    namespaces = namespaces_str.split('.')

    if len(namespaces) == 0:
        print("error: invalid namespace declaration", file=sys.stderr)
        exit(1)

    for n in namespaces:
        if not n.isidentifier():
            print(f"error: invalid namespace name: {n}", file=sys.stderr)
            exit(1)

    outstr = ''

    if args.nested_namespace_decls:
        ns_decl = '::'.join(namespaces)
        outstr = f'namespace {ns_decl} {{\n}}  // namespace {ns_decl}\n'
    else:
        for n in reversed(namespaces):
            outstr = f'namespace {n} {{\n{outstr}}}  // namespace {n}\n'

    return '\n' + outstr

ns_string = ''
if args.namespace is not None:
    ns_string = gen_namespaces(args.namespace)

for p in args.files:
    if exists(p):
        print(f"{p} already exists, skipping", file=sys.stderr)
        continue

    with open(p, mode='w') as outfile:
        guard = ''
        if args.pragma:
            print('#pragma once', file=outfile)
        else:
            guard = gen_include_guard(p)
            print(f'#ifndef {guard}\n#define {guard}', file=outfile)

        if args.extern_c:
            print(EXTERN_C, file=outfile)
        elif args.namespace is not None:
            print(ns_string, file=outfile)

        if not args.pragma:
            print(f'#endif  /* {guard} */', file=outfile)

    print(f'successfully created {p}')
